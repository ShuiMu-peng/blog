import{_ as l,c as o,a as s,b as a,d as t,e as p,o as c,r as i}from"./app-CE4jh6_n.js";const u="/blog/scheduler.assets/img.png",r="/blog/scheduler.assets/image-20220216191905877.png",d="/blog/scheduler.assets/image-20220215223336024.png",k="/blog/scheduler.assets/image-20220217085340221.png",m="/blog/scheduler.assets/2022-01-05-22-03-21-image.png",v="/blog/scheduler.assets/2022-01-05-22-07-36-image.png",b="/blog/scheduler.assets/image-20220212200323617-4667410.png",h="/blog/scheduler.assets/image-20220211105825056.png",g="/blog/scheduler.assets/image-20220210081901024.png",x="/blog/scheduler.assets/image-20220210082252183.png",f={},y={href:"https://www.cnblogs.com/Dorae/p/9357180.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://shardingsphere.apache.org/elasticjob/current/cn/overview/#elasticjob-lite",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B",target:"_blank",rel:"noopener noreferrer"},S={href:"https://dolphinscheduler.apache.org/zh-cn/docs/latest/user_doc/About_DolphinScheduler/About_DolphinScheduler.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://dolphinscheduler.apache.org/zh-cn/user/index.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://dolphinscheduler.apache.org/zh-cn/docs/latest/user_doc/architecture/design.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://dolphinscheduler.apache.org/zh-cn/docs/latest/user_doc/guide/installation/cluster.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://dolphinscheduler.apache.org/zh-cn/development/development-environment-setup.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://baomidou.com/pages/24112f/",target:"_blank",rel:"noopener noreferrer"};function D(J,n){const e=i("ExternalLinkIcon");return c(),o("div",null,[n[25]||(n[25]=s("h2",{id:"quartz",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#quartz"},[s("span",null,"quartz")])],-1)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("参考资料：")),s("a",y,[n[0]||(n[0]=a("Quartz原理解密 - Dorae - 博客园")),t(e)])])]),n[26]||(n[26]=p('<h3 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h3><blockquote><p>去中心化设计，各个节点之间并无感知</p><p>通过 <code>mysql for update</code> 锁，保证任务不重复调用</p></blockquote><p><img src="'+u+'" alt="image-20150519231230428"></p><h3 id="调度原理" tabindex="-1"><a class="header-anchor" href="#调度原理"><span>调度原理</span></a></h3><p><strong>大概逻辑如下：</strong></p><p><img src="'+r+`" alt="image-20220216191905877"></p><h3 id="调度源码" tabindex="-1"><a class="header-anchor" href="#调度源码"><span>调度源码</span></a></h3><blockquote><p>核心调度类：<code>QuartzSchedulerThread</code></p><p>主要代码如下：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 获取可用线程</span></span>
<span class="line"><span class="token keyword">int</span> availThreadCount <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blockForAvailableThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取待执行任务列表</span></span>
<span class="line">triggers <span class="token operator">=</span>qsRsrcs<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">acquireNextTriggers</span><span class="token punctuation">(</span></span>
<span class="line">        now <span class="token operator">+</span>idleWaitTime<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>availThreadCount<span class="token punctuation">,</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getMaxBatchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qsRsrcs<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getBatchTimeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 加锁，并循环处理待执行任务,更新任务的下次执行时间</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TriggerFiredResult</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggersFired</span><span class="token punctuation">(</span>triggers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 异步执行任务</span></span>
<span class="line">qsRsrcs<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">runInThread</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="elastic-job" tabindex="-1"><a class="header-anchor" href="#elastic-job"><span>elastic-job</span></a></h2>`,10)),s("blockquote",null,[s("p",null,[n[3]||(n[3]=a("参考资料：")),s("a",q,[n[2]||(n[2]=a("概览 :: ElasticJob")),t(e)])])]),n[27]||(n[27]=p(`<h3 id="架构图-1" tabindex="-1"><a class="header-anchor" href="#架构图-1"><span>架构图</span></a></h3><blockquote><ul><li>节点功能：</li></ul></blockquote><ul><li>注册到zk（通过zk协调任务分配）</li></ul><blockquote><ul><li>任务定时调度（通过quartz） <ul><li>leader选举（curator框架提供的LeaderLatch，一种抢占的方式来决定选主。各个节点通过在zk上指定目录下建立临时顺序节点，然后对列表进行排序，排在第一个就是leader）</li></ul></li></ul></blockquote><ul><li>leader 进行任务分片</li></ul><blockquote><ul><li>任务分片执行</li></ul></blockquote><ul><li>比如 A 任务需要处理100 条数据，为了快速执行，将任务切分为 3 片并行执行 <blockquote></blockquote></li><li>分片1 处理 id % 3 ==0 的数据</li></ul><blockquote><pre><code>  - 分片2 处理 id % 3 ==1 的数据
  - 分片3 处理 id % 3 ==2 的数据
</code></pre><ul><li>日志输出</li><li>console 控制台项目，获取任务执行信息</li></ul></blockquote><p><img src="https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png" alt="image-20220215223336024"></p><p><img src="`+d+'" alt="image-20220217085340221"></p><h3 id="调度原理-1" tabindex="-1"><a class="header-anchor" href="#调度原理-1"><span>调度原理</span></a></h3><p><img src="'+k+`" alt="image-20220217085340221"></p><h3 id="集成方式" tabindex="-1"><a class="header-anchor" href="#集成方式"><span>集成方式：</span></a></h3><h4 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml"><span>pom.xml</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere.elasticjob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticjob-lite-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="application-yml" tabindex="-1"><a class="header-anchor" href="#application-yml"><span>application.yml</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>port<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token key atrule">elasticjob</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">regCenter</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># zk地址</span></span>
<span class="line">    <span class="token key atrule">serverLists</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">2181</span></span>
<span class="line">    <span class="token comment">#空间，相互独立隔离</span></span>
<span class="line">    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elasticjob<span class="token punctuation">-</span>lite<span class="token punctuation">-</span>springboot</span>
<span class="line">  <span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># job名称</span></span>
<span class="line">    <span class="token key atrule">simpleJob</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># 执行类</span></span>
<span class="line">      <span class="token key atrule">elasticJobClass</span><span class="token punctuation">:</span> org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob</span>
<span class="line">      <span class="token comment"># 定时表达式</span></span>
<span class="line">      <span class="token key atrule">cron</span><span class="token punctuation">:</span> 1/5 * * * * <span class="token punctuation">?</span></span>
<span class="line">      <span class="token comment"># 总分片数量</span></span>
<span class="line">      <span class="token key atrule">shardingTotalCount</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">      <span class="token comment"># 分片参数，分片的执行方法中，可以拿到</span></span>
<span class="line">      <span class="token key atrule">shardingItemParameters</span><span class="token punctuation">:</span> 0=Beijing<span class="token punctuation">,</span>1=Shanghai<span class="token punctuation">,</span>2=Guangzhou</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java代码" tabindex="-1"><a class="header-anchor" href="#java代码"><span>java代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootSimpleJob</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJob</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringBootSimpleJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">FooRepository</span> fooRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ShardingContext</span> shardingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Item: {} | Time: {} | Thread: {} | {}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token comment">// 当前分片值</span></span>
<span class="line">                shardingContext<span class="token punctuation">.</span><span class="token function">getShardingItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;SIMPLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 根据自己的业务需要，根据分片参数，做相应的数据处理</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> fooRepository<span class="token punctuation">.</span><span class="token function">findTodoData</span><span class="token punctuation">(</span>shardingContext<span class="token punctuation">.</span><span class="token function">getShardingParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Foo</span> each <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            fooRepository<span class="token punctuation">.</span><span class="token function">setCompleted</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调度源码-1" tabindex="-1"><a class="header-anchor" href="#调度源码-1"><span>调度源码</span></a></h3><blockquote><p>因为底层基于<code>quartz</code>，所以任务触发核心依旧是：<code>QuartzSchedulerThread</code></p><p>对接底层<code>quartz</code>的job执行类为：<code>LiteJob.class</code></p><p>涉及类过多，此处仅展示调用关键流程，细节可查看具体源码</p></blockquote><img src="`+m+'" title="" alt="" width="742"><h2 id="xxl-job" tabindex="-1"><a class="header-anchor" href="#xxl-job"><span>xxl-job</span></a></h2><blockquote></blockquote>',24)),s("p",null,[n[5]||(n[5]=a("参考资料：")),s("a",j,[n[4]||(n[4]=a("分布式任务调度平台XXL-JOB")),t(e)])]),n[28]||(n[28]=p('<h3 id="架构图-2" tabindex="-1"><a class="header-anchor" href="#架构图-2"><span>架构图</span></a></h3><blockquote><ul><li>调度器、执行器 分离，去中心化，可动态伸缩</li><li>数据中心：表示系统中会涵盖的所有数据信息</li></ul></blockquote><p><img src="https://www.xuxueli.com/doc/static/xxl-job/images/img_Qohm.png" alt="image-img_Qohm.png"></p><h3 id="调度原理-2" tabindex="-1"><a class="header-anchor" href="#调度原理-2"><span>调度原理</span></a></h3><p><img src="'+v+`" alt="image-20220217085340221"></p><h3 id="集成方式-1" tabindex="-1"><a class="header-anchor" href="#集成方式-1"><span>集成方式</span></a></h3><h4 id="admin" tabindex="-1"><a class="header-anchor" href="#admin"><span>admin</span></a></h4><blockquote><p>修改数据库配置，直接启动</p></blockquote><h4 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span>executor</span></a></h4><h5 id="pom-xml-1" tabindex="-1"><a class="header-anchor" href="#pom-xml-1"><span>pom.xml</span></a></h5><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token comment">&lt;!-- xxl-job-core --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${project.parent.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="application-properties" tabindex="-1"><a class="header-anchor" href="#application-properties"><span>application.properties</span></a></h5><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token comment">### xxl-job admin address list, such as &quot;http://address&quot; or &quot;http://address01,http://address02&quot;</span></span>
<span class="line"><span class="token key attr-name">xxl.job.admin.addresses</span><span class="token punctuation">=</span><span class="token value attr-value">http://127.0.0.1:8081/xxl-job-admin,http://127.0.0.1:8079/xxl-job-admin</span></span>
<span class="line"><span class="token comment">### 注册的某个应用下</span></span>
<span class="line"><span class="token key attr-name">xxl.job.executor.appname</span><span class="token punctuation">=</span><span class="token value attr-value">xxl-job-executor-sample</span></span>
<span class="line"><span class="token comment">### 和admin交互的端口</span></span>
<span class="line"><span class="token key attr-name">xxl.job.executor.port</span><span class="token punctuation">=</span><span class="token value attr-value">9999</span></span>
<span class="line"><span class="token comment">### xxl-job executor log-path</span></span>
<span class="line"><span class="token key attr-name">xxl.job.executor.logpath</span><span class="token punctuation">=</span><span class="token value attr-value">./data/applogs/xxl-job/jobhandler</span></span>
<span class="line"><span class="token comment">### xxl-job executor log-retention-days</span></span>
<span class="line"><span class="token key attr-name">xxl.job.executor.logretentiondays</span><span class="token punctuation">=</span><span class="token value attr-value">30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="java代码-1" tabindex="-1"><a class="header-anchor" href="#java代码-1"><span>java代码</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * xxl job 配置</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">XxlJobConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.accessToken}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> accessToken<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.appname}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> appname<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.address}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.ip}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.port}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.logpath}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> logPath<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.logretentiondays}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> logRetentionDays<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">XxlJobSpringExecutor</span> <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token annotation punctuation">@RequiredArgsConstructor</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleXxlJob</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1、简单任务示例（Bean模式）</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;demoJobHandler&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoJobHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;===============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// String forObject1 = restTemplate.getForObject(&quot;http://ADT-CAMPAIGN-PORTAL-METADATA-TEST/rest/dataAnalysisTask.json/get/897eb7c0-61a6-4b76-90eb-db9e23cdcc2e?id=90&quot;, String.class);</span></span>
<span class="line">        <span class="token comment">// System.out.println(forObject1);</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token comment">// String url = XxlJobHelper.getJobParam();</span></span>
<span class="line">        <span class="token comment">// log.info(&quot;******====={}&quot;, url);</span></span>
<span class="line">        <span class="token comment">// XxlJobHelper.log(&quot;XXL-JOB, Hello World.&quot;);</span></span>
<span class="line">        <span class="token comment">// Assert.notNull(url, &quot;url 不能为空&quot;);</span></span>
<span class="line">        <span class="token comment">// String forObject = restTemplate.getForObject(url, String.class);</span></span>
<span class="line">        <span class="token comment">// log.info(forObject);</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="admin-调度源码" tabindex="-1"><a class="header-anchor" href="#admin-调度源码"><span>Admin 调度源码</span></a></h3><blockquote><p>核心调度类：<code>JobScheduleHelper</code></p><p>主要代码如下：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 获取数据库🔐</span></span>
<span class="line">preparedStatement <span class="token operator">=</span>conn<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">prepareStatement</span><span class="token punctuation">(</span>  <span class="token string">&quot;select * from xxl_job_lock where lock_name = &#39;schedule_lock&#39; for update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 查询下次执行事件 &lt;= 未来5s的时间</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> scheduleList <span class="token operator">=</span> <span class="token class-name">XxlJobAdminConfig</span><span class="token punctuation">.</span><span class="token function">getAdminConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getXxlJobInfoDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleJobQuery</span><span class="token punctuation">(</span>nowTime <span class="token operator">+</span> <span class="token constant">PRE_READ_MS</span><span class="token punctuation">,</span> preReadCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 触发任务执行</span></span>
<span class="line"><span class="token class-name">JobTriggerPoolHelper</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">trigger</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TriggerTypeEnum</span><span class="token punctuation">.</span><span class="token constant">CRON</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 更新下次执行时间</span></span>
<span class="line"><span class="token function">refreshNextValidTime</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 提交事务，释放🔐</span></span>
<span class="line">        conn<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dolphinscheduler" tabindex="-1"><a class="header-anchor" href="#dolphinscheduler"><span>DolphinScheduler</span></a></h2><blockquote></blockquote>`,20)),s("p",null,[n[7]||(n[7]=a("参考资料：")),s("a",S,[n[6]||(n[6]=a("调度框架dolphinscheduler")),t(e)])]),n[29]||(n[29]=p('<blockquote><p>更贴合大数据的分布式调度框架</p></blockquote><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><h4 id="关于dolphinscheduler" tabindex="-1"><a class="header-anchor" href="#关于dolphinscheduler"><span>关于DolphinScheduler</span></a></h4><blockquote><p>Apache 顶级开源项目，DolphinScheduler是一个分布式易扩展的可视化DAG工作流任务调度开源系统。解决数据研发ETL 错综复杂的依赖关系，不能直观监控任务健康状态等问题。DolphinScheduler以DAG流式的方式将Task组装起来，可实时监控任务的运行状态，同时支持重试、从指定节点恢复失败、暂停及Kill任务等操作</p><p><strong>DAG：</strong> 有向无环图。工作流中的Task任务以有向无环图的形式组装起来，从入度为零的节点进行拓扑遍历，直到无后继节点为止。举例如下图：</p><p><img src="https://dolphinscheduler.apache.org/img/dag_examples_cn.jpg" alt="dag示例"></p></blockquote><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性：</span></a></h4><h5 id="简单易用" tabindex="-1"><a class="header-anchor" href="#简单易用"><span>简单易用</span></a></h5><blockquote><p>DAG监控界面，所有流程定义都是可视化，通过拖拽任务定制DAG，通过API方式与第三方系统对接, 一键部署</p></blockquote><h5 id="高可靠性" tabindex="-1"><a class="header-anchor" href="#高可靠性"><span>高可靠性</span></a></h5><blockquote><p>去中心化的多Master和多Worker, 自身支持HA功能, 采用任务队列来避免过载，不会造成机器卡死</p></blockquote><h5 id="丰富的使用场景" tabindex="-1"><a class="header-anchor" href="#丰富的使用场景"><span>丰富的使用场景</span></a></h5><blockquote><p>支持暂停恢复操作.支持多租户，更好的应对大数据的使用场景. 支持更多的任务类型，如 spark,flink, hive, mr, python, sub_process, shell</p></blockquote><h5 id="高扩展性" tabindex="-1"><a class="header-anchor" href="#高扩展性"><span>高扩展性</span></a></h5><blockquote><p>支持自定义任务类型，调度器使用分布式调度，调度能力随集群线性增长，Master和Worker支持动态上下线</p></blockquote><h4 id="用户" tabindex="-1"><a class="header-anchor" href="#用户"><span>用户</span></a></h4>',14)),s("blockquote",null,[s("p",null,[s("a",w,[n[8]||(n[8]=a("信息来源")),t(e)])])]),n[30]||(n[30]=p('<p><img src="'+b+'" alt="image-20220212200323617"></p><h3 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h3><h4 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释"><span>名词解释：</span></a></h4><ul><li><strong>流程定义</strong>：通过拖拽任务节点并建立任务节点的关联所形成的可视化<strong>DAG</strong></li><li><strong>流程实例</strong>：流程实例是流程定义的实例化，可以通过手动启动或定时调度生成,流程定义每运行一次，产生一个流程实例</li><li><strong>任务实例</strong>：任务实例是流程定义中任务节点的实例化，标识着具体的任务执行状态</li><li><strong>任务类型</strong>：目前支持有SHELL、SQL、SUB_PROCESS(子流程)、PROCEDURE、MR、SPARK、PYTHON、DEPENDENT(依赖)、，同时计划支持动态插件扩展，注意：其中子 <strong>SUB_PROCESS</strong> 也是一个单独的流程定义，是可以单独启动执行的</li><li><strong>调度方式</strong>：系统支持基于cron表达式的定时调度和手动调度。命令类型支持：启动工作流、从当前节点开始执行、恢复被容错的工作流、恢复暂停流程、从失败节点开始执行、补数、定时、重跑、暂停、停止、恢复等待线程。 其中 <strong>恢复被容错的工作流</strong> 和 <strong>恢复等待线程</strong> 两种命令类型是由调度内部控制使用，外部无法调用</li><li><strong>定时调度</strong>：系统采用 <strong>quartz</strong> 分布式调度器，并同时支持cron表达式可视化的生成</li><li><strong>依赖</strong>：系统不单单支持 <strong>DAG</strong> 简单的前驱和后继节点之间的依赖，同时还提供<strong>任务依赖</strong>节点，支持**流程间的自定义任务依赖 **</li><li><strong>优先级</strong> ：支持流程实例和任务实例的优先级，如果流程实例和任务实例的优先级不设置，则默认是先进先出</li><li><strong>邮件告警</strong>：支持 <strong>SQL任务</strong> 查询结果邮件发送，流程实例运行结果邮件告警及容错告警通知</li><li><strong>失败策略</strong>：对于并行运行的任务，如果有任务失败，提供两种失败策略处理方式，<strong>继续</strong>是指不管并行运行任务的状态，直到流程失败结束。 <strong>结束</strong>是指一旦发现失败任务，则同时Kill掉正在运行的并行任务，流程失败结束</li><li><strong>补数</strong>：补历史数据，支持<strong>区间并行和串行</strong>两种补数方式</li></ul><blockquote><p>Spark 任务日志：</p><p><img src="'+h+'" alt="image-20220211105825056"></p></blockquote><h3 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h3>',6)),s("blockquote",null,[s("p",null,[n[10]||(n[10]=a("参考资料：")),s("a",A,[n[9]||(n[9]=a("架构设计")),t(e)])]),n[11]||(n[11]=s("p",null,[s("strong",null,"去中心化设计")],-1))]),n[31]||(n[31]=p(`<p><img src="https://dolphinscheduler.apache.org/img/architecture-1.3.0.jpg" alt="img"></p><h4 id="模块功能" tabindex="-1"><a class="header-anchor" href="#模块功能"><span>模块功能</span></a></h4><p><img src="https://dolphinscheduler.apache.org/img/master-process-2.0-zh_cn.png" alt="Start process activity diagram"></p><h5 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h5><blockquote><p>参考资料：https://dolphinscheduler.apache.org/zh-cn/docs/latest/user_doc/guide/open-api.html</p><ul><li><p>负责元数据的管理</p></li><li><p>api调用方式</p></li></ul></blockquote><h5 id="masterserver" tabindex="-1"><a class="header-anchor" href="#masterserver"><span>MasterServer</span></a></h5><blockquote><ul><li>MasterServer采用分布式无中心设计理念</li><li>根据工作流元数据，负责 DAG 任务切分，触发任务调度，任务执行监控</li><li>监听zk中注册的 <code>MasterServer</code> 和 <code>WorkerServer</code>节点</li><li>根据zk中记录的 <code>WorkerServer</code>节点信息，按路由策略，选择<code>WorkerServer</code>，通过<code>Netty</code>发送调度信息</li><li>根据<code>WorkerServer</code> 返回的执行状态信息，更新任务的状态</li></ul><h6 id="包含服务" tabindex="-1"><a class="header-anchor" href="#包含服务"><span>包含服务:</span></a></h6><ul><li><strong>Quartz</strong>分布式调度组件，主要负责定时任务的启停操作，当quartz调起任务后，Master内部会有线程池具体负责处理任务的后续操作</li><li><strong>MasterRegistryClient</strong> 注册到zk中，并监听worker、master 注册的目录</li><li><strong>MasterSchedulerService</strong>是一个扫描线程，定时扫描数据库中的 <strong>command</strong> 表，生成工作流实例，根据不同的<strong>命令类型</strong> 进行不同的业务操作</li><li><strong>WorkflowExecuteThread</strong>主要是负责DAG任务切分、任务提交、各种不同命令类型的逻辑处理，处理任务状态和工作流状态事件</li><li><strong>EventExecuteService</strong>处理master负责的工作流实例所有的状态变化事件，使用线程池处理工作流的状态事件</li><li><strong>StateWheelExecuteThread</strong>处理依赖任务和超时任务的定时状态更新</li><li><strong>FailoverExecuteThread</strong> 任务容错处理</li></ul><p><strong>源码解析</strong></p><p><strong>入口方法：</strong><code>org.apache.dolphinscheduler.server.master.MasterServer#run</code></p><p>springBoot 启动完成后，利用事件发布机制，调用此方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 下面仅列出关键执行方法</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 启动 NettyServer，用于和 WorkerServer 交互</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>nettyRemotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注册到zk，并监听 zk 中的 /nodes/ 目录，当worker、master发生变化时，同步到内存中</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>masterRegistryClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 负责工作流实例中的状态变化</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>eventExecuteService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 扫描线程，定时扫描数据库中的的command表，并启动StateWheelExecuteThread、 WorkflowExecuteThread </span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>masterSchedulerService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 容错恢复线程，查找未成功的任务 且调度者为自身或已经挂掉的节点数据，对失败任务进行重新处理</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>failoverExecuteThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// quartz 启动</span></span>
<span class="line"><span class="token class-name">QuartzExecutors</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="workerserver" tabindex="-1"><a class="header-anchor" href="#workerserver"><span>WorkerServer</span></a></h5><blockquote><ul><li><p>WorkerServer也采用分布式无中心设计理念，服务启动时向Zookeeper注册临时节点；</p></li><li><p>接收<code>MasterServer</code>调度请求，进行任务执行（所以woker所在服务，需要准备好任务执行所需的各种环境，比如spark、flink）；并响应执行结果</p></li></ul><p><strong>包含服务</strong></p><ul><li><strong>WorkerManagerThread</strong>主要通过netty领取master发送过来的任务，并根据不同任务类型调用<strong>TaskExecuteThread</strong>对应执行器。</li><li><strong>RetryReportTaskStatusThread</strong>主要通过netty向master汇报任务状态</li></ul><p><strong>源码解析：</strong></p><p><strong>入口方法</strong>：<code>org.apache.dolphinscheduler.server.worker.WorkerServer#run</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// spring bean实例化后，调用的初始化方法</span></span>
<span class="line"><span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">// 启动nettyServer，并</span></span>
<span class="line"> <span class="token keyword">this</span><span class="token punctuation">.</span>nettyRemotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 注册zk</span></span>
<span class="line"> <span class="token keyword">this</span><span class="token punctuation">.</span>workerRegistryClient<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 启动worker处理线程</span></span>
<span class="line"> <span class="token keyword">this</span><span class="token punctuation">.</span>workerManagerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 向master发送任务状态</span></span>
<span class="line"> <span class="token keyword">this</span><span class="token punctuation">.</span>retryReportTaskStatusThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="alert" tabindex="-1"><a class="header-anchor" href="#alert"><span>Alert</span></a></h5><blockquote><ul><li>告警管理，查询数据库中需要告警的数据，进行发送</li><li>sql 类型任务，发送邮件也会通过此服务</li></ul><p>源码仅支持单机服务</p></blockquote><h5 id="loggerserver" tabindex="-1"><a class="header-anchor" href="#loggerserver"><span>LoggerServer</span></a></h5><blockquote><p>日志服务，给<code>API</code>服务调用查看日志</p></blockquote><h4 id="quartz-整合原理" tabindex="-1"><a class="header-anchor" href="#quartz-整合原理"><span><code>quartz</code> 整合原理</span></a></h4><ul><li><code>API</code> 服务在定时任务启动时，会将定时信息，按照<code>quartz</code>需要的格式，插入到数据库中</li><li><code>quartz</code> 定时触发时，<code>org.apache.dolphinscheduler.service.quartz.ProcessScheduleJob</code>类，会将任务信息，插入到表 <code>t_ds_command</code></li></ul><h3 id="运维" tabindex="-1"><a class="header-anchor" href="#运维"><span>运维</span></a></h3>`,16)),s("blockquote",null,[s("p",null,[n[13]||(n[13]=a("参考资料：")),s("a",T,[n[12]||(n[12]=a("运维手册")),t(e)])]),n[14]||(n[14]=s("p",null,"注意：若需要支持 动态扩容、缩容；需要 docker 部署方式",-1))]),n[32]||(n[32]=s("h3",{id:"二次开发",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二次开发"},[s("span",null,"二次开发")])],-1)),s("blockquote",null,[s("p",null,[n[16]||(n[16]=a("参考资料：")),s("a",E,[n[15]||(n[15]=a("开发者指南")),t(e)])])]),n[33]||(n[33]=s("h4",{id:"技术栈",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#技术栈"},[s("span",null,"技术栈")])],-1)),s("ul",null,[n[19]||(n[19]=s("li",null,"quartz（2.3.0）",-1)),n[20]||(n[20]=s("li",null,"mysql（5.7.13）",-1)),n[21]||(n[21]=s("li",null,"springBoot（2.5.6）",-1)),s("li",null,[s("a",z,[n[17]||(n[17]=a("mybatisPlus")),t(e)]),n[18]||(n[18]=a("（3.2.0）"))]),n[22]||(n[22]=s("li",null,"zookeeper(3.4.6+)",-1)),n[23]||(n[23]=s("li",null,[a("统一资源管理 : 共享存储支持[ "),s("code",null,"HDFS"),a("、"),s("code",null,"S3A"),a("、"),s("code",null,"MinIO"),a("]")],-1)),n[24]||(n[24]=s("li",null,"前端：VUE",-1))]),n[34]||(n[34]=p(`<h4 id="源码模块" tabindex="-1"><a class="header-anchor" href="#源码模块"><span>源码模块</span></a></h4><ul><li>dolphinscheduler-alert 告警模块，提供 AlertServer 服务。</li><li>dolphinscheduler-api web应用模块，提供 ApiServer 服务。</li><li>dolphinscheduler-common 通用的常量枚举、工具类、数据结构或者基类</li><li>dolphinscheduler-dao 提供数据库访问等操作。</li><li>dolphinscheduler-remote 基于 netty 的客户端、服务端</li><li>dolphinscheduler-server MasterServer 和 WorkerServer 服务</li><li>dolphinscheduler-service service模块，包含Quartz、Zookeeper、日志客户端访问服务，便于server模块和api模块调用</li><li>dolphinscheduler-ui 前端模块</li></ul><h4 id="spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制"><span>spi机制</span></a></h4><blockquote><p>service provider interface：java 提供的服务发现机制</p></blockquote><p><strong>例如 告警插件的扩展：</strong></p><blockquote><p>1、项目启动时，会找到所有告警插件，插入到数据库中</p><p>2、告警发送时，根据配置的告警类型，找到实现类进行发送</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 告警渠道工厂 接口类</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AlertChannelFactory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">AlertChannel</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Returns the configurable parameters that this plugin needs to display on the web ui</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginParams</span><span class="token punctuation">&gt;</span></span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 告警渠道发送接口</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AlertChannel</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">AlertResult</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AlertInfo</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// http 发送工厂</span></span>
<span class="line"><span class="token comment">// @AutoService 是google提供的便捷spi方式，类似lombok;</span></span>
<span class="line"><span class="token comment">// 编译后在目录：target/classes/META-INF/services/org.apache.dolphinscheduler.alert.api.AlertChannelFactory 文件</span></span>
<span class="line"><span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span><span class="token class-name">AlertChannelFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpAlertChannelFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AlertChannelFactory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Http&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginParams</span><span class="token punctuation">&gt;</span></span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AlertChannel</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpAlertChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// http 发送实现类</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpAlertChannel</span> <span class="token keyword">implements</span> <span class="token class-name">AlertChannel</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AlertResult</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AlertInfo</span> alertInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AlertData</span> alertData <span class="token operator">=</span> alertInfo<span class="token punctuation">.</span><span class="token function">getAlertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsMap <span class="token operator">=</span> alertInfo<span class="token punctuation">.</span><span class="token function">getAlertParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> paramsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AlertResult</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http params is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpSender</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>alertData<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h3><blockquote><p><strong>ADT如何应用？</strong>（还没有实现）</p><ul><li>HTTP调度服务：特点：需要通过 <code>微服务名称</code>方式调用（不直接使用域名）</li></ul></blockquote><ul><li>现有方式：使用的<code>quartz</code>框架，并且注册至注册中心，所以可以通过服务名称进行调用</li></ul><blockquote><ul><li>DS方式：需要增加一个能够调用微服务接口的桥梁接口，DS携带真实请求路径访问中间接口，桥梁接口转发真实调用请求</li><li><strong>归因引擎</strong>：特点：<code>有序的 3 个 flink</code>任务</li></ul></blockquote><ul><li>现有方式：3个jenkins任务使用 shell 脚本 去调用flink任务，java代码 发起 jenkins，并轮询获取jenkins执行状态，第一个成功后，发起第二个任务调用，依次调用完成</li></ul><blockquote><ul><li>DS方式：</li></ul></blockquote><ul><li>定义flink任务执行的 dag图，flink 任务执行结束后，增加 Http任务节点（可以检验返回值，保证稳定调用成功），或者连接数据库直接更新数据的状态</li></ul><blockquote><pre><code>- java代码 调用 DS的接口，发起任务调用
</code></pre></blockquote><h3 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h3><p>https://dolphinscheduler.apache.org/zh-cn/docs/release/faq.html</p><h3 id="其他资料" tabindex="-1"><a class="header-anchor" href="#其他资料"><span>其他资料：</span></a></h3><p><img src="`+g+'" alt="image-20220210081901024"></p><p><img src="'+x+'" alt="image-20220210082252183"></p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><table><thead><tr><th></th><th>xxl-job</th><th>elastic-job</th><th>quzrtz</th><th>dolphinscheduler</th></tr></thead><tbody><tr><td>集群依赖</td><td>mysql</td><td>zookeeper</td><td>mysql</td><td>mysql、zookeeper</td></tr><tr><td>动态扩容</td><td>支持</td><td>支持</td><td>支持</td><td>master、worker支持</td></tr><tr><td>任务分片，并行处理</td><td>支持</td><td>支持</td><td></td><td>不支持</td></tr><tr><td>管理界面</td><td>非常完善</td><td>完善，需要单独部署项目， 但是如果需要新增加定时任务，需要二次开发</td><td></td><td>非常完善</td></tr><tr><td>日志追溯</td><td>支持</td><td>支持</td><td></td><td>支持</td></tr><tr><td>任务失败处理策略</td><td>内置邮件告警， 可轻易扩展其他告警方式，如：钉钉、企业微信</td><td>内置：邮件、企业微信、钉钉</td><td></td><td>内置：邮件、企业微信、钉钉、飞书、http......<br>且支持扩展</td></tr><tr><td>集成困难度</td><td>简单</td><td>简单</td><td>简单</td><td>略复杂</td></tr><tr><td>支持DAG</td><td>不支持，未来计划支持</td><td>不支持，未来计划支持</td><td></td><td>支持</td></tr></tbody></table><h2 id="选择" tabindex="-1"><a class="header-anchor" href="#选择"><span>选择</span></a></h2><p>一定要按照实际需求</p><ul><li>基础业务调用，不需要<code>dag</code>；且对大数据任务需求较少 <ul><li>建议选择 <code>xxl-job</code></li><li>因为：基础功能强大，简单易用，环境依赖，架构简单，易维护</li></ul></li><li>else： <ul><li>选择<code>Dolphinscheduler</code></li></ul></li></ul>',25))])}const R=l(f,[["render",D],["__file","scheduler.html.vue"]]),I=JSON.parse('{"path":"/blogs/jishu/scheduler/scheduler.html","title":"分布式调度框架调研","lang":"en-US","frontmatter":{"title":"分布式调度框架调研","date":"2022-09-02T00:00:00.000Z","author":"shuiMu","categories":["技术"],"tags":["quartz","dolphinScheduler","xxl-job"]},"headers":[{"level":2,"title":"quartz","slug":"quartz","link":"#quartz","children":[{"level":3,"title":"架构图","slug":"架构图","link":"#架构图","children":[]},{"level":3,"title":"调度原理","slug":"调度原理","link":"#调度原理","children":[]},{"level":3,"title":"调度源码","slug":"调度源码","link":"#调度源码","children":[]}]},{"level":2,"title":"elastic-job","slug":"elastic-job","link":"#elastic-job","children":[{"level":3,"title":"架构图","slug":"架构图-1","link":"#架构图-1","children":[]},{"level":3,"title":"调度原理","slug":"调度原理-1","link":"#调度原理-1","children":[]},{"level":3,"title":"集成方式：","slug":"集成方式","link":"#集成方式","children":[]},{"level":3,"title":"调度源码","slug":"调度源码-1","link":"#调度源码-1","children":[]}]},{"level":2,"title":"xxl-job","slug":"xxl-job","link":"#xxl-job","children":[{"level":3,"title":"架构图","slug":"架构图-2","link":"#架构图-2","children":[]},{"level":3,"title":"调度原理","slug":"调度原理-2","link":"#调度原理-2","children":[]},{"level":3,"title":"集成方式","slug":"集成方式-1","link":"#集成方式-1","children":[]},{"level":3,"title":"Admin 调度源码","slug":"admin-调度源码","link":"#admin-调度源码","children":[]}]},{"level":2,"title":"DolphinScheduler","slug":"dolphinscheduler","link":"#dolphinscheduler","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[]},{"level":3,"title":"架构设计","slug":"架构设计","link":"#架构设计","children":[]},{"level":3,"title":"运维","slug":"运维","link":"#运维","children":[]},{"level":3,"title":"二次开发","slug":"二次开发","link":"#二次开发","children":[]},{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]},{"level":3,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":3,"title":"其他资料：","slug":"其他资料","link":"#其他资料","children":[]}]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"选择","slug":"选择","link":"#选择","children":[]}],"git":{"createdTime":1729153375000,"updatedTime":1729235013000,"contributors":[{"name":"peng.li","email":"lip.app@qq.com","commits":1}]},"filePathRelative":"blogs/技术/scheduler/scheduler.md"}');export{R as comp,I as data};
