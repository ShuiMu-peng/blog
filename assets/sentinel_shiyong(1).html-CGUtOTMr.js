import{_ as p,c as l,e,a as s,b as a,d as i,o,r as c}from"./app-C7ucYrat.js";const u="/blog/Sentinel.assets/74023.png",r="/blog/Sentinel.assets/74024.png",d="/blog/Sentinel.assets/74475.png",k="/blog/Sentinel.assets/74025.png",m="/blog/Sentinel.assets/image-20241018170118466.png",g="/blog/Sentinel.assets/image-20241018175524859.png",v="/blog/Sentinel.assets/image-20241022103657772.png",b="/blog/Sentinel.assets/74688.png",h="/blog/Sentinel.assets/image-20241018182829249.png",y="/blog/Sentinel.assets/image-20241022183958734.png",S="/blog/Sentinel.assets/image-20241023105548639.png",f="/blog/Sentinel.assets/image-20241023105734887.png",_="/blog/Sentinel.assets/image-20241023105926394.png",q="/blog/Sentinel.assets/image-20241023110411685.png",x="/blog/Sentinel.assets/image-20241023110513419.png",w="/blog/Sentinel.assets/image-20241023110606290.png",j="/blog/Sentinel.assets/image-20241023110717840.png",E={},R={href:"https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#2-%E5%90%AF%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8F%B0",target:"_blank",rel:"noopener noreferrer"};function I(F,n){const t=c("ExternalLinkIcon");return o(),l("div",null,[n[4]||(n[4]=e('<h1 id="sentinel" tabindex="-1"><a class="header-anchor" href="#sentinel"><span>Sentinel</span></a></h1><h2 id="_1-服务雪崩及其解决方案" tabindex="-1"><a class="header-anchor" href="#_1-服务雪崩及其解决方案"><span>1. 服务雪崩及其解决方案</span></a></h2><ol><li>当服务访问量达到一定程度，流量扛不住的时候，该如何处理？</li><li>服务之间相互依赖，当服务A出现响应时间过长，影响到服务B的响应，进而产生连锁反应，直至影响整个依赖链上的所有服务，该如何处理？</li></ol><blockquote><p>如何保证微服务运行期间的稳定性，这是分布式、微服务开发不可避免的问题。</p></blockquote><h3 id="_1-1-什么是服务雪崩" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是服务雪崩"><span>1.1 什么是服务雪崩</span></a></h3><p>在一个高度服务化的系统中,我们实现的一个业务逻辑通常会依赖多个服务,比如:商品详情展示服务会依赖商品服务, 价格服务, 商品评论服务. 如图所示:</p><p><img src="'+u+'" alt="img"></p><p>调用三个依赖服务会共享商品详情服务的线程池. 如果其中的商品评论服务不可用, 就会出现线程池里所有线程都因等待响应而被阻塞, 从而造成服务雪崩. 如图所示:</p><p><img src="'+r+'" alt="img"></p><p>在微服务调用链路中，因服务提供者的不可用导致服务调用者的不可用,并将不可用逐渐放大的过程，就叫服务雪崩效应。</p><p><img src="'+d+'" alt="img"></p><p><strong>导致服务不可用的原因：</strong></p><ul><li><strong>程序有Bug</strong>：代码循环调用的逻辑问题，资源未释放引起的内存泄漏等问题；</li><li><strong>大流量请求</strong>：在秒杀和大促开始前,如果准备不充分,瞬间大量请求会造成服务提供者的不可用；</li><li><strong>硬件故障</strong>：可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问；</li><li><strong>缓存击穿</strong>：一般发生在缓存应用重启, 缓存失效时高并发，所有缓存被清空时,以及短时间内大量缓存失效时。大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用。</li></ul><p>在服务提供者不可用的时候，会出现大量重试的情况：用户重试、代码逻辑重试，这些重试最终导致：进一步加大请求流量。所以归根结底导致雪崩效应的最根本原因是：大量请求线程同步等待造成的资源耗尽。当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了。</p><h3 id="_1-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_1-2-解决方案"><span>1.2 解决方案</span></a></h3><ul><li>超时机制：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止地等待。</li><li>服务限流：限制业务访问的QPS，避免服务因为流量的突增而故障。这种是从预防层面来解决雪崩问题。</li><li>舱壁隔离(资源隔离)：限定每个业务能使用的线程数，避免耗尽整个线程池的资源。它是通过划分线程池的线程，让每个业务最多使用n个线程，进而提高容灾能力。但是这种模式会导致一定的资源浪费，比如，服务C已经宕机，但每次还是会尝试让服务A去向服务C发送请求 <img src="'+k+`" alt="img"></li><li>服务熔断降级：这种模式主要是参考电路熔断，如果一条线路电压过高，保险丝会熔断，防止火灾。放到我们的系统中，如果某个目标服务调用慢或者有大量超时，此时，熔断该服务的调用，对于后续调用请求，不在继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用。 <ul><li>有服务熔断，必然要有服务降级。所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据) 。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景。</li></ul></li></ul><h2 id="_2-流量治理组件sentinel实战" tabindex="-1"><a class="header-anchor" href="#_2-流量治理组件sentinel实战"><span>2. 流量治理组件Sentinel实战</span></a></h2><h3 id="_2-1-sentinel-是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-sentinel-是什么"><span>2.1 Sentinel 是什么</span></a></h3><blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式、多语言异构化服务架构的流量治理组件，主要以流量为切入点，从流量路由、流量控制、流量整形、熔断降级、系统自适应过载保护、热点流量防护等多个维度来帮助开发者保障微服务的稳定性。</p><p>官方文档： https://sentinelguard.io/zh-cn/docs/introduction.html</p></blockquote><p>Sentinel具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ul><h3 id="_2-2-sentinel核心概念" tabindex="-1"><a class="header-anchor" href="#_2-2-sentinel核心概念"><span>2.2 Sentinel核心概念</span></a></h3><h4 id="资源-resource" tabindex="-1"><a class="header-anchor" href="#资源-resource"><span><strong>资源（Resource）</strong></span></a></h4><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>**只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。**大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><h4 id="规则-rule" tabindex="-1"><a class="header-anchor" href="#规则-rule"><span><strong>规则(Rule)</strong></span></a></h4><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h2 id="_3-sentinel快速开始" tabindex="-1"><a class="header-anchor" href="#_3-sentinel快速开始"><span>3 Sentinel快速开始</span></a></h2><h3 id="基于原始方式" tabindex="-1"><a class="header-anchor" href="#基于原始方式"><span>基于原始方式</span></a></h3><p><strong>1.引入依赖</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.定义受保护的资源和流控规则</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RESOURCE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token constant">RESOURCE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 被保护的逻辑</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 处理被流控的逻辑</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;block!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;被流控了&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 定义流控规则</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initFlowRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">FlowRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//设置受保护的资源</span></span>
<span class="line">        rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token constant">RESOURCE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置流控规则 QPS</span></span>
<span class="line">        rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span><span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置受保护的资源阈值</span></span>
<span class="line">        <span class="token comment">// Set limit QPS to 20.</span></span>
<span class="line">        rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 加载配置好的规则</span></span>
<span class="line">        <span class="token class-name">FlowRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 测试结果</strong></p><blockquote><p>结果如下，可以看到，每秒只有一个请求成功</p></blockquote><p><img src="`+m+'" alt="image-20241018170118466"></p><h3 id="微服务集成" tabindex="-1"><a class="header-anchor" href="#微服务集成"><span>微服务集成</span></a></h3>',37)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("Sentinel 提供一个轻量级的开源")),s("a",R,[n[0]||(n[0]=a("控制台")),i(t)]),n[2]||(n[2]=a("，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。"))]),n[3]||(n[3]=s("p",null,"注意：Sentinel 控制台目前仅支持单机部署",-1))]),n[5]||(n[5]=e(`<p><strong>启动Sentinel控制台</strong></p><ol><li><p>下载sentinel控制台jar包： https://github.com/alibaba/Sentinel/releases/download/1.8.6/sentinel-dashboard-1.8.6.jar</p></li><li><p>启动</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">-jar</span> sentinel-dashboard-1.8.6.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>访问http://localhost:8080/#/login ,默认用户名密码： sentinel/sentinel <img src="`+g+`" alt="image-20241018175524859"></p></li></ol><p><strong>微服务整合Sentinel</strong></p><p>1、<strong>引入依赖：</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、<strong>业务代码中配置需要保护的资源</strong></p><blockquote><p>当 SpringBoot 应用接入 Sentinel starter 后，可以针对某个 URL 进行流控。所有的 URL 就自动成为 Sentinel 中的埋点资源，可以针对某个 URL 进行流控。或者使用@SentinelResource 注解用来标识资源是否被限流、降级。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// mvc接口方法自动埋点</span></span>
<span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;info id: {}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> id<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用@SentinelResource 注解用来标识资源是否被限流、降级</span></span>
<span class="line"><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getUser&quot;</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">&quot;handleException&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">UserEntity</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">UserEntity</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    userEntity<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;===被限流降级啦===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> userEntity<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、<strong>添加yml配置，为微服务设置sentinel控制台地址</strong></p><blockquote><p>spring.cloud.sentinel.transport.port 端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了一个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。</p><p>注意：sentinel控制台中，需要接口有过请求，才会展示资源，如果请求过也没有资源，可以增加启动参数：<code>-Dcsp.sentinel.dashboard.server=localhost:8080</code><img src="`+v+`" alt="image-20241022103657772"></p></blockquote><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer</span>
<span class="line">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">transport</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span></span>
<span class="line">        <span class="token comment"># 指定应用与Sentinel控制台交互的端口，应用会起一个HttpServer占用该端口</span></span>
<span class="line">        <span class="token comment"># port: 8720</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、<strong>启动sentinel控制台，在sentinel控制台中设置流控规则</strong></p><blockquote><ul><li><strong>资源名</strong>: 接口的API</li><li><strong>针对来源</strong>: 默认是default，当多个微服务都调用这个资源时，可以配置微服务名来对指定的微服务设置阈值</li><li><strong>阈值类型</strong>: 分为QPS和线程数 假设阈值为10</li><li><strong>QPS类型</strong>: 只得是每秒访问接口的次数&gt;1就进行限流</li><li><strong>线程数</strong>: 为接受请求该资源分配的线程数&gt;1就进行限流</li></ul></blockquote><p><img src="`+b+'" alt="img"></p><p>5、<strong>测试：</strong></p><blockquote><p>http://localhost:8800/user/info/1 因为QPS是1，所以1秒内多次访问会出现如下情形，每秒只有一个请求能够成功</p></blockquote><p><img src="'+h+`" alt="image-20241018182829249"></p><h3 id="通过sentinel-对外暴露的-endpoint查看相关的配置" tabindex="-1"><a class="header-anchor" href="#通过sentinel-对外暴露的-endpoint查看相关的配置"><span>通过Sentinel 对外暴露的 Endpoint查看相关的配置</span></a></h3><blockquote><p>Sentinel Endpoint 里暴露的信息包括当前应用的所有规则信息、日志目录、当前实例的 IP，Sentinel Dashboard 地址应用与 Sentinel Dashboard 的心跳频率等等信息</p></blockquote><ol><li><p>引入依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>暴露监控端点</strong>,application.yml中配置</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment">#暴露actuator端点   </span></span>
<span class="line"><span class="token key atrule">management</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">exposure</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>访问地址：<code>http://localhost:8080/actuator/sentinel</code></p></li><li><p>流控规则： <img src="`+y+`" alt="image-20241022183958734"></p></li></ol><h3 id="resttemplate整合sentinel" tabindex="-1"><a class="header-anchor" href="#resttemplate整合sentinel"><span>RestTemplate整合Sentinel</span></a></h3><blockquote><p>Spring Cloud Alibaba Sentinel 支持对 RestTemplate 的服务调用使用 Sentinel 进行保护，在构造 RestTemplate bean的时候需要加上 @SentinelRestTemplate 注解。</p><p>@SentinelRestTemplate 注解的属性支持限流(blockHandler, blockHandlerClass)和降级(fallback, fallbackClass BlockException中的DegradeException)的处理。</p></blockquote><h4 id="_1、resttemplate添加-sentinelresttemplate注解" tabindex="-1"><a class="header-anchor" href="#_1、resttemplate添加-sentinelresttemplate注解"><span><strong>1、RestTemplate添加@SentinelRestTemplate注解</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token annotation punctuation">@LoadBalanced</span></span>
<span class="line"><span class="token annotation punctuation">@SentinelRestTemplate</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、使用resttemplate调用微服务接口" tabindex="-1"><a class="header-anchor" href="#_2、使用resttemplate调用微服务接口"><span><strong>2、使用<code>restTemplate</code>调用微服务接口</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;info id: {}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// String s = memberFeignService.memberInfo(id);</span></span>
<span class="line">    <span class="token class-name">String</span> s <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://member/member/info/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、可以看到-对resttemplate支持两种粒度的配置" tabindex="-1"><a class="header-anchor" href="#_3、可以看到-对resttemplate支持两种粒度的配置"><span><strong>3、可以看到，对<code>restTemplate</code>支持两种粒度的配置</strong></span></a></h4><blockquote><p>整个微服务的路径</p><p>某个接口路径</p></blockquote><p><img src="`+S+'" alt="image-20241023105548639"></p><h4 id="_4、流控配置" tabindex="-1"><a class="header-anchor" href="#_4、流控配置"><span><strong>4、流控配置</strong></span></a></h4><p><img src="'+f+'" alt="image-20241023105734887"></p><h4 id="_5、测试结果" tabindex="-1"><a class="header-anchor" href="#_5、测试结果"><span><strong>5、测试结果</strong></span></a></h4><blockquote><p>当超过阈值时，展示如下异常</p></blockquote><p><img src="'+_+`" alt="image-20241023105926394"></p><h3 id="openfeign整合sentinel" tabindex="-1"><a class="header-anchor" href="#openfeign整合sentinel"><span>OpenFeign整合Sentinel</span></a></h3><h4 id="_1、yaml开启sentinel对feign的支持" tabindex="-1"><a class="header-anchor" href="#_1、yaml开启sentinel对feign的支持"><span><strong>1、yaml开启sentinel对feign的支持</strong></span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">feign</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启Sentinel 对 Feign 的支持</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、配置feign客户端类" tabindex="-1"><a class="header-anchor" href="#_2、配置feign客户端类"><span><strong>2、配置feign客户端类</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;member&quot;</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&quot;/member&quot;</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">FallbackMemberFeignService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MemberFeignService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info/{userId}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">memberInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FallbackMemberFeignService</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberFeignService</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MemberFeignService</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MemberFeignService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">memberInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&quot;被降级了&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、测试-并生成调用资源链路" tabindex="-1"><a class="header-anchor" href="#_3、测试-并生成调用资源链路"><span><strong>3、测试，并生成调用资源链路</strong></span></a></h4><p><img src="`+q+'" alt="image-20241023110411685"></p><h4 id="_4、配置流控规则" tabindex="-1"><a class="header-anchor" href="#_4、配置流控规则"><span><strong>4、配置流控规则</strong></span></a></h4><p><img src="'+x+'" alt="image-20241023110513419"></p><h4 id="_5、测试结果-1" tabindex="-1"><a class="header-anchor" href="#_5、测试结果-1"><span><strong>5、测试结果</strong></span></a></h4><p><img src="'+w+'" alt="image-20241023110606290"></p><h4 id="_6、关闭member服务-再次请求测试-降级依旧生效" tabindex="-1"><a class="header-anchor" href="#_6、关闭member服务-再次请求测试-降级依旧生效"><span><strong>6、关闭<code>member</code>服务，再次请求测试，降级依旧生效</strong></span></a></h4><p><img src="'+j+'" alt="image-20241023110717840"></p>',47))])}const C=p(E,[["render",I],["__file","sentinel_shiyong(1).html.vue"]]),P=JSON.parse('{"path":"/blogs/jishu/sentinel/sentinel_shiyong(1).html","title":"sentinel 入门","lang":"en-US","frontmatter":{"title":"sentinel 入门","date":"2024-05-01T00:00:00.000Z","author":"shuiMu","categories":["技术"],"tags":["sentinel"]},"headers":[{"level":2,"title":"1. 服务雪崩及其解决方案","slug":"_1-服务雪崩及其解决方案","link":"#_1-服务雪崩及其解决方案","children":[{"level":3,"title":"1.1 什么是服务雪崩","slug":"_1-1-什么是服务雪崩","link":"#_1-1-什么是服务雪崩","children":[]},{"level":3,"title":"1.2 解决方案","slug":"_1-2-解决方案","link":"#_1-2-解决方案","children":[]}]},{"level":2,"title":"2. 流量治理组件Sentinel实战","slug":"_2-流量治理组件sentinel实战","link":"#_2-流量治理组件sentinel实战","children":[{"level":3,"title":"2.1 Sentinel 是什么","slug":"_2-1-sentinel-是什么","link":"#_2-1-sentinel-是什么","children":[]},{"level":3,"title":"2.2 Sentinel核心概念","slug":"_2-2-sentinel核心概念","link":"#_2-2-sentinel核心概念","children":[]}]},{"level":2,"title":"3 Sentinel快速开始","slug":"_3-sentinel快速开始","link":"#_3-sentinel快速开始","children":[{"level":3,"title":"基于原始方式","slug":"基于原始方式","link":"#基于原始方式","children":[]},{"level":3,"title":"微服务集成","slug":"微服务集成","link":"#微服务集成","children":[]},{"level":3,"title":"通过Sentinel 对外暴露的 Endpoint查看相关的配置","slug":"通过sentinel-对外暴露的-endpoint查看相关的配置","link":"#通过sentinel-对外暴露的-endpoint查看相关的配置","children":[]},{"level":3,"title":"RestTemplate整合Sentinel","slug":"resttemplate整合sentinel","link":"#resttemplate整合sentinel","children":[]},{"level":3,"title":"OpenFeign整合Sentinel","slug":"openfeign整合sentinel","link":"#openfeign整合sentinel","children":[]}]}],"git":{"createdTime":1729842612000,"updatedTime":1729842612000,"contributors":[{"name":"peng.li","email":"lip.app@qq.com","commits":1}]},"filePathRelative":"blogs/技术/sentinel/sentinel_使用(1).md"}');export{C as comp,P as data};
