import{_ as i,c as e,a,o as s}from"./app-CC2E6MUS.js";const n="/blog/mysql.assets/image-20230202085158769.png",t="/blog/mysql.assets/image-20230210144715048.png",r={};function o(d,l){return s(),e("div",null,l[0]||(l[0]=[a('<h2 id="查询过程" tabindex="-1"><a class="header-anchor" href="#查询过程"><span>查询过程</span></a></h2><p><img src="'+n+'" alt="image-20230202085158769"></p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><h5 id="事务acid的特性" tabindex="-1"><a class="header-anchor" href="#事务acid的特性"><span>事务ACID的特性：</span></a></h5><ul><li>原子性：同时成功，同时失败；由undo log 日志来实现</li><li>一致性：使用事务的最终目的；由其他三个特性以及业务代码正确逻辑来实现</li><li>持久性：一旦提交了事务，他对数据库的改变就是永久性的，持久性由redo log 日志来实现</li><li>隔离性：事务并发执行时，内部的操作不能相互干扰，隔离性由Mysql 的各种锁，MVCC机制来实现</li></ul><h5 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别：</span></a></h5><ul><li>读未提交</li><li>读已提交</li><li>可重复度 <ul><li>幻读：当某个事物中主动根据id 修改数据时，会触发当前读，会拉取最新的数据，则会发现前后select 的数据不同</li><li>脏写：update xxx set aa = 100 ，直接赋值的方式导致</li></ul></li><li>串行化：串行执行，读的时候增加 读锁（lock in share mode），性能很差</li></ul><h3 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc"><span>MVCC</span></a></h3><ul><li>快照读：select</li><li>当前读：insert、update、delete</li><li>语句级快照：read commit</li><li>事务级快照：repeatable commit</li></ul><h4 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理：</span></a></h4><blockquote><p>undo log 回滚日志，数据版本链条</p><ol><li><strong>每条更改记录，都会增加两个字段：</strong><ol><li>trx_id：事务id</li><li>roll_pointer：回滚的数据指针</li></ol></li><li>select 读取时，记录当前<code>read_view</code> 视图，包括两部分：[当前未提交的所有事务id]，当前已创建的最大事务id <ol><li>[100,200],300 <ol><li>则小于100的事务id，都已经提交</li></ol></li><li>记录min_txid：100，max_txid：300</li></ol></li><li>可见性算法规则： <ol><li>row的txid 小于 min_txid ，则可见</li><li>row的txid 大于 max_txid，则不可见</li><li>其他情况时，需要额外判断： <ol><li>在未提交的事务id数组中，则不可见</li><li>否则可见</li></ol></li></ol></li></ol></blockquote><p><strong>读已提交 事务隔离级别时，read_view 每次查询都会重新生成，所以能读取到最新的数据</strong></p><p>当前事务中发生update语句时，当前这条数据的读取，会变成当前读，从当前内存读取最新的数据</p><p><img src="'+t+`" alt="image-20230210144715048"></p><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h3><ul><li><p><strong>性能上分类：乐观锁，悲观锁</strong></p></li><li><p><strong>粒度上区分：表锁，页锁，行锁</strong>，间隙锁</p><ul><li><p><strong>表锁</strong>：表级别的锁；并发度小，开销小，加锁快</p><ul><li>lock table {tableName1} read(write),{tableName2} read(write);</li><li>show open tables; （in_use=1 表示加锁中）</li><li>unlock tables; 释放锁</li></ul></li><li><p>页锁：只有innodb存储引擎支持页锁</p><ul><li>某个page页的数据加锁，开销介于表锁和行锁之间</li></ul></li><li><p><strong>行锁</strong>：并发度高，开销大，加锁慢（因为需要找到具体的某一条数据）</p><ul><li>innoDB 支持行级别锁</li></ul></li><li><p><strong>Gap锁，间隙锁</strong></p><ul><li><p>两个id值之间的空隙，rr 隔离级别才能生效</p></li><li><p>也就是说，只要在道障范围内锁了一条不存在的记录会锁住整个间隙范围，不锁边界记录，这样就能防止它Session在这个间隙范围内插入数据，就解决了可重复读隔离级别的幻读问题。</p></li><li><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">-- 则(10,20)这个空的区间会锁住</span>
<span class="line">update account set a =1 where id =18</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>临键锁</strong>：行锁 + 间隙锁 ，组合就是<code>临键锁</code></p></li></ul></li><li><p><strong>类型上区分：</strong></p><ul><li><strong>读锁</strong>（共享锁、S锁）：select ... lock in share mode <ul><li>是共享的，多个事务可以同时读取同一个资源，但不允许其他事物修改</li></ul></li><li><strong>写锁</strong>（排它锁，X锁）：select ... for update <ul><li>排它的，会阻塞其他的写锁和读锁，update、delete、insert 都会加写锁</li></ul></li></ul></li><li><p><strong>意向锁</strong>：mysql自己增加的，为了提高效率，当有一个session给加锁之后，会设置一个标识，其他session过来过发现已经被加锁，则不用再遍历数据，判断是否加锁</p></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他：</span></a></h2><h3 id="查询操作方法-需要使用事务吗" tabindex="-1"><a class="header-anchor" href="#查询操作方法-需要使用事务吗"><span>查询操作方法，需要使用事务吗？</span></a></h3><blockquote><p>看业务要求，以及事物隔离级别</p><p>如果默认的rr级别，最好增加事务，保证多条sql查询的结果都是 同一时间维度</p></blockquote><h3 id="事务优化时间原则" tabindex="-1"><a class="header-anchor" href="#事务优化时间原则"><span>事务优化时间原则</span></a></h3><ul><li>查询等操作可以考虑放到事务外</li><li>事务之中避免远程调用，远程调用增加超时设置</li><li>事务中避免一次性处理太多数据，可以考虑拆分成多个事务分词处理</li><li>更新等涉及加锁的操作尽可能放到事务靠后的位置</li><li>能异步处理，尽量异步处理</li></ul><h4 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查"><span>问题排查</span></a></h4><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">-- 展示锁占用情况</span>
<span class="line">show status like &#39;innodb_row_lock%&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql-日志" tabindex="-1"><a class="header-anchor" href="#mysql-日志"><span>Mysql 日志</span></a></h2><h3 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>redo log</span></a></h3><p>执行 命令预写日志：wal机制</p><h3 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog"><span>binlog</span></a></h3><p>记录所有修改的语句</p><ul><li>数据恢复 <ul><li>根据偏移量进行数据恢复</li><li>根据时间范围进行数据恢复</li></ul></li><li>从库复制</li></ul><p>5.7 默认关闭，8 之后默认开启</p><p>二进制归档文件</p><h3 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>undo log</span></a></h3><p>回滚日志，数据版本链条</p>`,34)]))}const c=i(r,[["render",o],["__file","mysql.html.vue"]]),h=JSON.parse('{"path":"/blogs/jishu/mysql/mysql.html","title":"Mysql","lang":"en-US","frontmatter":{"title":"Mysql","date":"2022-07-13T00:00:00.000Z","author":"shuiMu","categories":["技术"],"tags":["mysql"]},"headers":[{"level":2,"title":"查询过程","slug":"查询过程","link":"#查询过程","children":[]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"MVCC","slug":"mvcc","link":"#mvcc","children":[]},{"level":3,"title":"锁","slug":"锁","link":"#锁","children":[]}]},{"level":2,"title":"其他：","slug":"其他","link":"#其他","children":[{"level":3,"title":"查询操作方法，需要使用事务吗？","slug":"查询操作方法-需要使用事务吗","link":"#查询操作方法-需要使用事务吗","children":[]},{"level":3,"title":"事务优化时间原则","slug":"事务优化时间原则","link":"#事务优化时间原则","children":[]}]},{"level":2,"title":"Mysql 日志","slug":"mysql-日志","link":"#mysql-日志","children":[{"level":3,"title":"redo log","slug":"redo-log","link":"#redo-log","children":[]},{"level":3,"title":"binlog","slug":"binlog","link":"#binlog","children":[]},{"level":3,"title":"undo log","slug":"undo-log","link":"#undo-log","children":[]}]}],"git":{"createdTime":1729153375000,"updatedTime":1729235013000,"contributors":[{"name":"peng.li","email":"lip.app@qq.com","commits":1}]},"filePathRelative":"blogs/技术/mysql/mysql.md"}');export{c as comp,h as data};
